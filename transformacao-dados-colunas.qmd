---
title: "Introdução ao R"
subtitle: "Transformação de dados: colunas"
format: 
  revealjs:
      logo: img/brasao1_horizontal_cor_300dpi.png
      theme: simple
      css: logo.css
progress: true
slide-number: true
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
source("./_common.R")
```

```{r}
#| label: setup
#| echo: false
#| include: false
library(tidyverse)
library(nycflights13)
library(janitor)
library(countdown)
library(gt)
```

# Colunas - columns {transition="fade"}

## Pacotes

Carregue os pacotes abaixo:

```{r}
#| eval: false
#| echo: true

library(tidyverse)
library(nycflights13)
library(janitor)
```

## Funções para as colunas (variáveis)

-   [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html): cria novas colunas derivadas das colunas existentes
-   [`select()`](https://dplyr.tidyverse.org/reference/select.html): altera quais colunas estão presentes
-   [`rename()`](https://dplyr.tidyverse.org/reference/rename.html): altera os nomes das colunas
-   [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html): altera as posições das colunas

## Banco para exercícios [`economics`](https://ggplot2.tidyverse.org/reference/economics.html) {.smaller}

Este conjunto de dados foi produzido a partir de dados de séries temporais econômicas dos EUA disponíveis em https://fred.stlouisfed.org/

-   Formato: um banco de dados com `r nrow(economics)` observações e `r ncol(economics)` variáveis
    -   `date`: mês da coleta de dados (`r min(year(economics$date))` - `r max(year(economics$date))`)
    -   `pce`: gastos de consumo pessoal, em bilhões de dólares
    -   `pop`: população total, em milhares
    -   `psavert`: taxa de poupança pessoal
    -   `uempmed`: duração mediana do desemprego, em semanas
    -   `unemploy`: número de desempregados em milhares

## Banco para exercícios [`economics`](https://ggplot2.tidyverse.org/reference/economics.html)

```{r}
glimpse(economics)
```

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) {.smaller}

-   `air_time`: quantidade de tempo gasta no ar, em minutos
-   `air_time_horas`: `air_time`/60

```{r}
#| echo: true
flights |> 
  mutate(
    air_time_horas = air_time/60
    )
```

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) {.smaller}

-   Novas colunas são adicionadas no lado direito do conjunto de dados
    -   difícil de vizualizar
-   `.before` ("antes") e `.after` ("depois") para indicar onde a variável deve ficar

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) {.smaller}

-   É possível usar um número ou o nome da coluna para indicar a posição

::: panel-tabset
### Número

```{r}
#| echo: true
flights |> 
  mutate(
    air_time_horas = air_time/60,
    .before = 1
    )
```

### Nome da coluna

```{r}
#| echo: true
flights |> 
  mutate(
    air_time_horas = air_time/60,
    .after = year
    )
```
:::

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) {.smaller}

-   `.keep = c("all", "used", "unused", "none")`
    -   `"all"` retém todas as colunas (padrão)
    -   `"used"` retém apenas as colunas usadas para criar novas colunas
    -   `"unused"` retém apenas as colunas não usadas
    -   `"none"` não retém nenhuma coluna extra de `.data`. Apenas as variáveis de agrupamento e as colunas criadas são mantidas.

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) {.smaller}

::: panel-tabset
### "used"

```{r}
#| echo: true
flights |> 
  mutate(
    air_time_horas = air_time/60,
    .keep = "used"
    )
```

### "none"

```{r}
#| echo: true
flights |> 
  mutate(
    air_time_horas = air_time/60,
    .keep = "none"
    )
```
:::

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) {.smaller}

-   Não altera o banco de dados orignial
-   É preciso salvar a coluna nova no próprio banco ou em outro objeto com o operador de atribuição `<-`

## [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) {.smaller}

::: panel-tabset
### Salvo no próprio banco

```{r}
#| echo: true
flights <- flights |> 
  mutate(
    air_time_horas = air_time/60,
    .after = day
    )

glimpse(flights)
```

### Salvo em um novo objeto

```{r}
#| echo: true
air_time_horas <- flights |> 
  mutate(
    air_time_horas = air_time/60,
    .keep = "none"
    )

air_time_horas
```
:::

## Exercícios

```{r}
countdown(minutes = 2)
```

Crie uma coluna (variável) chamada `consumo_percapita` que calcule a relação entre os gastos de consumo pessoal (`pce`) e a população (`pop`).

## Resposta

```{r}
#| echo: true
economics |> 
  mutate(
    consumo_percapita = pce/pop
    )
```

## Exercícios

```{r}
countdown(minutes = 2)
```

Crie uma variável chamada `des_hab` a taxa de desempregados (`unemploy`) por habitante (`pop`)

## Resposta

```{r}
#| echo: true
economics |> 
  mutate(
    des_hab = unemploy/pop
  )
```

## Exercícios {.smaller}

```{r}
countdown(minutes = 3)
```

Salve em um objeto chamado `des_hab_2008` somente a variável `des_hab` criada anteriormente, mas queremos apenas os dados referentes ao ano de 2008.

-   Você pude usar a função ([`year`](https://lubridate.tidyverse.org/reference/year.html)) para transmformar variável `date` em ano!
-   Lembre que o operador de atribuição (`<-`) é utilizado para salvar objetos
-   Recorde o que aprendemos com a função `filter()`

## Resposta - parte 1

```{r}
#| echo: true
economics |> 
  mutate(
    date = year(date)
    )  
```

## Resposta - parte 2

```{r}
#| echo: true
economics |> 
  mutate(
    date = year(date),
    des_hab = unemploy/pop
    )
```

## Resposta - parte 3

```{r}
#| echo: true
economics |> 
  mutate(
    date = year(date),
    des_hab = unemploy/pop,
    .keep = "none"
    )
```

## Resposta - parte 4

```{r}
#| echo: true
economics |> 
  mutate(
    date = year(date),
    des_hab = unemploy/pop,
    .keep = "none"
    ) |>
  filter(date == 2008)
```

## Resposta - parte 5

```{r}
#| echo: true
des_hab_2008 <- economics |> 
  mutate(
    date = year(date),
    des_hab = unemploy/pop,
    .keep = "none"
    ) |>
  filter(date == 2008)

des_hab_2008
```

## Criação de variáveis compostas {.smaller}

-   Criadas a partir da combinação de duas ou mais variáveis originais
-   Objetivo: capturar uma determinada dimensão ou constructo que não pode ser medido diretamente por nenhuma das variáveis isoladamente.
-   Exemplo: fator ou componente de uma escala calculado pela média de um grupo de itens

## DASS-21 {.smaller}

-   Três dimensões: depressão, ansiedade e estresse
-   21 itens, sendo 7 para cada dimensão
-   Escalade resposta: 0 a 3
-   Valores mais altos indicam níveis mais elevados de depressão, ansiedade e estresse
-   Cada dimensão é calculada com a soma dos respectivos itens

## DASS-21: depressão

```{r}
#| echo: false
dass_itens <- read_csv("data/dass_21_itens.csv")

depressao_itens <- 
  dass_itens |> 
  pivot_longer(
    cols = everything()
    ) |> 
  select(value) |>
  slice(c(3,5,10,13,16,17,21)) |>
  mutate(
    Item = c(3,5,10,13,16,17,21),
    .before = 1
    ) |> 
  rename("Assertiva" = value) |> 
  gt() |> 
  cols_align(
    align = "center",
    columns = "Item"
  ) |> 
  opt_stylize(
    style = 1, color = "gray"
  )

depressao_itens
```

## DASS-21: Ansiedade

```{r}
#| echo: false

ansiedade_itens <- 
  dass_itens |> 
  pivot_longer(
    cols = everything()
    ) |> 
  select(value) |> 
  slice(c(2,4,7,9,15,19,20)) |> 
  mutate(
    Item = c(2,4,7,9,15,19,20),
    .before = 1
    ) |>
  rename("Assertiva" = value) |> 
  gt() |> 
  cols_align(
    align = "center",
    columns = "Item"
  ) |> 
  opt_stylize(
    style = 1, color = "gray"
  )

ansiedade_itens  
```

## DASS-21: Estresse

```{r}
#| echo: false

estresse_itens <- 
  dass_itens |> 
  pivot_longer(
    cols = everything()
    ) |> 
  select(value) |> 
  slice(c(1,6,8,11,12,14,18)) |> 
  mutate(
    Item = c(1,6,8,11,12,14,18),
    .before = 1
    ) |> 
  rename("Assertiva" = value) |> 
  gt() |> 
  cols_align(
    align = "center",
    columns = "Item"
  ) |> 
  opt_stylize(
    style = 1, color = "gray"
  )

estresse_itens
```

## `dass_simulado`: importação do banco[^1]

[^1]: Não se preocupe com esse código por hora. Vamos ter um módulo sobre importação e exportação de dados no R.

```{r}
#| include: false
#| eval: false

# Definir a quantidade de participantes
n_participants <- 100

# Gerar as variáveis aleatórias para as questões da DASS-21
dass_values <- replicate(21, sample(0:3, size = n_participants, replace = TRUE))
dass_df <- data.frame(dass_values)

# Adicionar variáveis para sexo e idade
sex <- sample(c("M", "F"), n_participants, replace = TRUE)
age <- sample(18:65, n_participants, replace = TRUE)

# Combinar todas as variáveis em um único dataframe
simulated_data <- bind_cols(dass_df, data.frame(sex = sex, age = age))

# Alterar os nomes das colunas
colnames(simulated_data) <- c(paste0("dass_", 1:21), "sex", "age")

# Visualizar as primeiras linhas do dataframe simulado
head(simulated_data)

simulated_data |> 
  summarise(
    across(where(is.numeric),
           list(min = min,
                max = max))
    )

write_csv(simulated_data, file = "./data/dass_simulado.csv")
```

```{r}
#| echo: true
#| eval: false
dass_simulado <- read_csv("https://tinyurl.com/dassdata")
```

```{r}
#| include: false
dass_simulado <- read_csv("./data/dass_simulado.csv")
```

## `dass_simulado`

```{r}
#| echo: true
glimpse(dass_simulado)
```

## `dass_simulado`

| Variável       |       |
|----------------|-------|
| dass_1:dass_21 | DASS  |
| sex            | Sexo  |
| age            | Idade |

## Criação da variável `depressao`

```{r}
#| echo: false
depressao_itens
```

## Criação da variável `depressao`

```{r}
#| echo: true
#| code-line-numbers: "|1|2|3|4|5|6|7|8|9|10|11|"
dass_simulado |>
  rowwise() |> 
  mutate(
    depressao = sum(c(dass_3,dass_5,dass_10,
                      dass_13,dass_16,dass_17,
                      dass_21)),
    .keep = "none"
    ) |> 
  ungroup()
```

## [`rowwise()`](https://dplyr.tidyverse.org/articles/rowwise.html) {.smaller}

-   `mutate()`: opera nas colunas
-   `rowwise()`: faz o mutate operar nas linhas
    -   tipo especial de agrupamento

## Tibble simulada

```{r}
#| echo: true
df <- tibble(
  x = 1:2, y = 3:4, 
  z = 5:6
  )

df
```

## `Sem rowwise()`

Calculou a média de `x`, `y` e `z` através de todas as linhas

```{r}
#| echo: true
df |>  
  mutate(
    m = mean(c(x, y, z))
    )

(1+3+5+2+4+6)/6
```

## `Com rowwise()`

Calculou a média para cada linha

```{r}
#| echo: true
df |>  
  rowwise() |>  
  mutate(
    m = mean(c(x, y, z))
    ) |> 
  ungroup()

(1+3+5)/3

(2+4+6)/3
```

## DASS-21: depressão

```{r}
#| echo: false
depressao_itens
```

## Criação da variável `depressao` {.smaller}

::: panel-tabset
### Sem `rowwise()`

```{r}
#| echo: true
#| code-line-numbers: "|1|2|"
dass_simulado |>
  #rowwise() |> 
  mutate(
    depressao = sum(c(dass_3,dass_5,dass_10,
                      dass_13,dass_16,dass_17,
                      dass_21)),
    .keep = "none"
    ) |> 
  ungroup()
```

### Com `rowwise()`

```{r}
#| echo: true
#| code-line-numbers: "|1|2|"
dass_simulado |>
  rowwise() |> 
  mutate(
    depressao = sum(c(dass_3,dass_5,dass_10,
                      dass_13,dass_16,dass_17,
                      dass_21)),
    .keep = "none"
    ) |> 
  ungroup()
```
:::

## Exercício

Salve a variável depressão no banco `dass_simulado`. Ela deve ser a primeira coluna

```{r}
depressao_itens
countdown(minutes = 3)
```

## Resposta {.smaller}

```{r}
#| echo: true
dass_simulado <- dass_simulado |> 
  rowwise() |> 
  mutate(
    depressao = sum(c(dass_3,dass_5,dass_10,
                      dass_13,dass_16,dass_17,
                      dass_21)),
    .before = 1
    ) |> 
  ungroup()

dass_simulado
```

## 

::: callout-warning
Sempre que usar qualquer função de agrupamento como `rowwise()` ou `group_by()`, que veremos adiante, use `ungroup()` após concluir a operação. Caso contrário, o agrupamento será mantido no novo objeto salvo e vai se propagar pelas demais análises
:::

## Exercício

Salve a variável `ansiedade` no banco dass_simulado e faça com que ela seja a segunda coluna de dados, depois de `depressao`

## Ansiedade

```{r}
#| echo: false
countdown(minutes = 3)
ansiedade_itens
```

## Resposta

```{r}
#| echo: true
dass_simulado <- dass_simulado |> 
  rowwise() |> 
  mutate(
    ansiedade = sum(c(dass_2,dass_4,dass_7,
                      dass_9,dass_15,dass_19,
                      dass_20)),
    .after = depressao
    ) |> 
  ungroup()

dass_simulado
```

## Exercício

Salve a variável `estresse` no banco dass_simulado e faça com que ela seja a terceira coluna de dados, depois de `ansiedade`.

## DASS-21: Estresse

```{r}
#| echo: false
countdown(minutes = 3)
estresse_itens
```

## Resposta

```{r}
#| echo: true
dass_simulado <- dass_simulado |> 
  rowwise() |> 
  mutate(
    estresse = sum(dass_1,dass_6,dass_8,
                   dass_11,dass_12,dass_14,
                   dass_18),
    .after = ansiedade
    ) |> 
  ungroup()

dass_simulado
```

## Criação de variáveis compostas

Variáveis no banco em sequência: `c_across()`

```{r}
#| eval: false
#| include: false

dass_simulado_seq <- read_csv("./data/dass_simulado.csv")

dass_simulado_seq <- dass_simulado_seq |>
  relocate(dass_3,dass_5,dass_10,dass_13,
           dass_16,dass_17,dass_21,dass_2,
           dass_4,dass_7,dass_9,dass_15,
           dass_19,dass_20,dass_1,dass_6,
           dass_8,dass_11,dass_12,dass_14,
           dass_18) |> 
  rename_with(~ str_c("d",1:7),
              .cols = dass_3:dass_21) |> 
  rename_with(~ str_c("a",1:7),
              .cols = dass_2:dass_20) |> 
  rename_with(~ str_c("e",1:7),
              .cols = dass_1:dass_18)

dass_simulado_seq |> 
  write_csv("./data/dass_simulado_seq.csv")
  
```

## `dass_simulado_seq`: importação do banco

```{r}
#| include: false
dass_simulado_seq <- read_csv("./data/dass_simulado_seq.csv")
```

```{r}
#| echo: true
#| eval: false
dass_simulado_seq <- read_csv("https://tinyurl.com/dassseqq")
```

## Uma olhada em `dass_simulado_seq`

```{r}
#| echo: true
glimpse(dass_simulado_seq)
```

## Uma olhada em `dass_simulado_seq` {.smaller}

-   depressão - d1:d7
-   ansiedade - a1:a7
-   estresse - e1:e7

```{r}
#| echo: true
dass_simulado_seq
```

## Criação da variável `depressao`: `c_across()`

```{r}
#| echo: true
dass_simulado_seq <- dass_simulado_seq |>
  rowwise() |> 
  mutate(
    depressao = sum(c_across(d1:d7)),
    .before = d1
  ) |> 
  ungroup()
```

## Conferindo o resultado

```{r}
#| echo: true
dass_simulado |> 
  summarise(
    m = mean(depressao),
    sd = sd(depressao)
  )
```

```{r}
#| echo: true
dass_simulado_seq |> 
  summarise(
    m = mean(depressao),
    sd = sd(depressao)
  )
```

## Exerício

```{r}
countdown(minutes = 5)
```

Salve as variáveis depressao, ansiedade e estresse no banco dass_simulado_seq

## Resposta - parte 1: calculando as variáveis

```{r}
#| include: false
dass_simulado_seq <- read_csv("./data/dass_simulado_seq.csv")
```

```{r}
#| echo: true
dass_simulado_seq <- dass_simulado_seq |> 
  rowwise() |> 
  mutate(
    depressao = sum(c_across(d1:d7)),
    ansiedade = sum(c_across(a1:a7)),
    estresse = sum(c_across(e1:e7))
  ) |> 
  ungroup()
```

## Respost parte 2: conferindo o resultado

```{r}
#| echo: true
dass_simulado_seq |> 
  glimpse()
```

## Inversão de escores dos itens {.smaller}

-   Por que inverter os escores?
    -   Em escalas de avaliação, alguns itens são formulados de maneira inversa para evitar vieses nas respostas
    -   Itens com sentido conceitual oposto precisam ter seus escores invertidos para manter a consistência na análise
    -   A inversão permite que todos os itens sejam interpretados na mesma direção: escores altos sempre indicam maior presença da característica avaliada

## Exemplo: Escala de Avaliação do Contexto de Trabalho Docente (EACTD) {.smaller}

```{r}
eactd_exemplo <- tribble(
  ~Item, ~"Nunca", ~"Raramente", ~"Às vezes", ~"Frequentemente", ~"Sempre",
  "A sala de aula é desconfortável (mesa, cadeira, iluminação, climatização, ventilação etc) - (R)", 1, 2, 3, 4, 5,
  "A sala dos professores é confortável", 1, 2, 3, 4, 5
)


eactd_exemplo_tabela <- eactd_exemplo |> 
  gt() |> 
  cols_align(
    align = "center", columns = 2:6
  ) |>
  tab_style(
    style = cell_text(align = "center"),
    locations = cells_column_labels(columns = Item)
  ) |> 
  tab_options(
    table.width = "100%"
  ) |> 
  opt_stylize(
    style = 1, color = "gray"
  )

eactd_exemplo_tabela
```

-   Análise dos itens:
    -   Item 1 (Invertido): "A sala de aula é desconfortável"
        -   Resposta "Nunca (1)" indica uma situação positiva (sala confortável).
    -   Item 2: "A sala dos professores é confortável"
        -   Resposta "Nunca (1)" indica uma situação negativa (sala desconfortável)
-   Problema: os escores não estão alinhados; respostas iguais representam sentidos opostos

## Alinhando os sentidos dos itens

-   Solução: inverter os escores do item invertido para que todos os escores altos representem situações positivas
-   Benefícios:
    -   Facilita a interpretação dos dados
    -   Garante consistência na análise estatística

## Como inverter os escores dos itens?

-   Identifique o maior valor da escala Likert
    -   No exemplo, o maior valor é 5
-   Some 1 ao maior valor
    -   $5 + 1 = 6$
-   Subtraia o escore original desse resultado
    -   Fórmula: escore invertido = 6 - escore original
-   Aplique a fórmula aos itens que precisam ser invertidos

## Exemplo no R

::: panel-tabset
### Dados iniciais

```{r}
dados <- tribble(
  ~id, ~item_1, ~item_2, 
   1,      1,       3,
   2,      2,       4,
   3,      3,       5,
   4,      4,       2,
   5,      5,       1,
)

dados
```

### Inversão dos escores do item 1

```{r}
#| echo: true
dados |> 
  mutate(
    item_1_r = 6 - item_1,
    .after = item_1 
  )
```
:::

## Recodificação de variáveis: `case_when()` {.smaller}

-   Inverter os escores dos itens
-   Reduzir o número de categorias
-   Converter níveis de escalas likert em números
-   Transformar variáveis contínuas em categóricas

## Inverter os escores dos itens

::: panel-tabset
### Dados inciais

```{r}
dados
```

### Inversão dos escores do item 1

```{r}
#| echo: true
dados |> 
  mutate(
    item_1_r = case_when(item_1 == 1 ~ 5,
                         item_1 == 2 ~ 4,
                         item_1 == 3 ~ 3,
                         item_1 == 4 ~ 2,
                         item_1 == 5 ~ 1),
    .after = item_1
  )
```
:::

## Reduzir o número de categorias {.smaller}

::: panel-tabset
### Dados iniciais

```{r}
formacao_exemplo <- tribble(
  ~formacao,
  "Ensino fundamental", 
  "Ensino médio", 
  "Graduação", 
  "Mestrado", 
  "Doutorado" 
)

formacao_exemplo
```

### Categorias reduzidas

```{r}
#| echo: true
formacao_exemplo |> 
  mutate(
    formacao_dic = case_when(formacao %in% c("Ensino fundamental", 
                                             "Ensino médio") ~ "Sem ensino superior",
                             .default = "Com ensino superior")
  )
```
:::

## Exercicio

No banco de dados `starwars`, a partir da variável `species`, crie uma nova coluna (`species_dic`) em que só existam duas categorias: “humanos” e “não humanos”.

::: callout-tip
Você pode usar a função `distinct()` para ver quais categorias estão presentes na variável
:::

```{r}
countdown(minutes = 2)
```

## Resposta

```{r}
#| echo: true
starwars |> 
  mutate(
    species_dic = case_when(species == "Human" ~ "humano",
                            .default = "Não humano"),
    .after = species
  )
```

## Exercicio

```{r}
countdown(minutes = 3)
```

No banco de dados `gss_cat` recodifique a variável `relig` de modo que só restem três categorias “cristãos”, “não cristãos” e “indefinido”

## Resposta

::: panel-tabset
### Análise das categorias da variável

```{r}
gss_cat |> 
  distinct(relig)
```

### Recodificação das categorias

```{r}
gss_cat |> 
  mutate(
    relig = case_when(relig %in% c("Protestant", "Orthodox-christian",
                                   "Christian", "Catholic") ~ "cristão",
                      relig %in% c("No answer", "Don't know") ~ "indefinido",
                      .default = "não cristão")
  )
```
:::

## Converter níveis de escalas likert em números {.smaller}

::: panel-tabset
### Dados iniciais

```{r}
likert_converter <- tribble(
  ~item_1,            ~item_2,    
  "nunca",           "sempre",
  "raramente",       "frequentemente",
  "às vezes",        "às vezes",
  "frequentemente",  "raramente",
  "sempre",          "nunca"
)

likert_converter
```

### Conversão dos itens

```{r}
#| echo: true
likert_converter |> 
  mutate(
    item_1_num = case_when(item_1 == "nunca" ~ 1,
                          item_1 == "raramente" ~ 2,
                          item_1 == "às vezes" ~ 3,
                          item_1 == "frequentemente" ~ 4,
                          .default = 5),
    .after = item_1
  )
```
:::

## Transformar variáveis contínuas em categóricas

::: panel-tabset
### Dados iniciais

```{r}
idade_exemplo <- tribble(
  ~idade,
  17,
  16,
  18,
  23,
  19,
)

idade_exemplo
```

### Variável transformada

```{r}
#| echo: true
idade_exemplo |> 
  mutate(
    idade_dic = case_when(idade >= 18 ~ "Maior ou igual a 18 anos",
                          .default = "Menor de 18 anos")
  )
```
:::

## Variável contínua em categórica {.smaller}

-   Avaliação qualitativa de escalas de rastreio (SRQ-20, DASS-21 etc.)
-   Criação de faixas de idade, renda, dentre outras
-   Avaliação qualitativa de medidas em geral que tem pontos de corte

## `acompanhamento_nutri`: importação do banco

```{r}
acompanhamento_nutri <- read_csv("./data/acompanhamento_nutri.csv")
```

```{r}
#| echo: true
#| eval: false
acompanhamento_nutri <- read_csv("https://tinyurl.com/ac-nutri")
```

```{r}
#| echo: true
acompanhamento_nutri
```

## Criação da variável: `idade_fases`

```{r}
idade_faixa <- tribble(
  ~Fase,           ~Faixa,
  "12 a 20 anos",  "adolescência",
  "21 a 65",       "fase adulta",
  "acima de 65",   "velhice"
)

idade_faixa |> 
  gt() |> 
  cols_align(
    align = "center",
  ) |> 
  tab_options(
    table.width = "100%"
  ) |> 
  opt_stylize(
    style = 1, color = "gray"
  )
```

## Criação da variável: `idade_fases`

```{r}
#| echo: true
case_acompanhamento_nutri <- acompanhamento_nutri |>
  mutate(
    idade_corte = case_when(idade <= 20 ~ "adolescente",
                            idade >= 21 & idade <= 65 ~ "adulto",
                            idade > 65 ~ "idoso"),
    .after = idade
  ) 

case_acompanhamento_nutri
```

## Variável contínua em categórica: `cut()` {.smaller}

-   `right = T` (padrão): inclui o valor indicado no ponto de corte (\<= 20, \<= 65)

```{r}
#| echo: true
cut_acompanhamento_nutri <- acompanhamento_nutri |> 
  mutate(
    idade_corte = cut(idade, breaks = c(-Inf, 20, 65, +Inf),
                      labels = c("adolescente", "adulto", "idoso"),
                      right = T),
    .after = idade
  ) 

cut_acompanhamento_nutri
```

## Comparando os resultados de `cut()` e `case_when()`

```{r}
#| echo: true
case_acompanhamento_nutri$idade_corte == cut_acompanhamento_nutri$idade_corte
```

## Comparando os resultados de `cut()` e `case_when()`

::::: columns
::: {.column width="50%"}
```{r}
#| echo: true
case_acompanhamento_nutri |> 
  select(idade, idade_corte)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
cut_acompanhamento_nutri |> 
  select(idade, idade_corte)
```
:::
:::::

## Exercício {.smaller}

```{r}
countdown(minutes = 3)
```

Salve a variávél `imc_corte` no banco `acompanhamento_nutri` a partir dos pontos de corte a seguir a seguir:

| IMC                                    | Faixa         |
|----------------------------------------|---------------|
| abaixo de 18,5                         | baixo peso    |
| maior ou igual a 18,5 e menor que 25,0 | peso adequado |
| maior ou igual a 25,0 e menor que 30,0 | sobrepeso     |
| maior ou igual a 30,0                  | obesidade     |

: Pontos de Corte para IMC em adultos

::: callout-tip
Se usar `cut()`, lembre-se de usar `right = F` para não incluir o ponto de corte na categoria (\< 18,5)
:::

## Resposta

::: panel-tabset
### `case_when()`

```{r}
#| echo: true
acompanhamento_nutri <- acompanhamento_nutri |> 
  mutate(
    imc_corte_case_when = case_when(imc < 18.5 ~ "baixo peso",
                                    imc >= 18.5 & imc < 25 ~ "peso adequado",
                                    imc >= 25 & imc < 30 ~ "sobrepeso",
                                    imc >= 30 ~ "obesidade")
  )

acompanhamento_nutri
```

### `cut()`

```{r}
#| echo: true
acompanhamento_nutri <- acompanhamento_nutri |> 
  mutate(
    imc_corte_cut = cut(imc, 
                        breaks = c(-Inf, 18.5, 25, 30, +Inf),
                        labels = c("baixo peso", "peso adequado",
                                   "sobrepeso", "obesidade"),
                        right = F)
  )

acompanhamento_nutri
```
:::

## Exercício {.smaller}

```{r}
countdown(minutes = 5)
```

Salve a variável `frequencia_treino_corte` no banco `ac_nutri` a partir dos pontos de corte a seguir a seguir:

| Frequência  | Faixa           |
|-------------|-----------------|
| 1 a 2 vezes | pouco frequente |
| 3 a 5 vezes | frequente       |
| 6 a 7 vezes | muito frequente |

: Pontos de corte para frequência aos treinos

## Resposta

```{r}
#| echo: true
acompanhamento_nutri <- acompanhamento_nutri |> 
  mutate(
    frequencia_treino_corte = cut(frequencia_treino,
                                  breaks = c(-Inf, 2, 5, +Inf), 
                                  labels = c("pouco frequente", 
                                             "frequente",
                                             "muito frequente")),
    .after = frequencia_treino
  )

acompanhamento_nutri
```

## [`select()`](https://dplyr.tidyverse.org/reference/select.html)

Permite que você selecione rapidamente um subconjunto de variáveis a partir de operações usando os seus nomes

```{r}
#| echo: true
flights |> 
  glimpse()
```

## [[`select()`](https://dplyr.tidyverse.org/reference/select.html): seleciona as colunas pelo nome]{style="font-size: 40pt"}

```{r}
#| echo: true
flights |> 
  select(year,month,day)
```

## [[`select()`](https://dplyr.tidyverse.org/reference/select.html): seleciona todas as colunas entre ano e dia (inclusive)]{style="font-size: 40pt"}

```{r}
#| echo: true
flights |> 
  select(year:day)
```

## [[`select()`](https://dplyr.tidyverse.org/reference/select.html): seleciona todas as colunas, exceto as de ano a dia (inclusive)]{style="font-size: 40pt"}

```{r}
#| echo: true
flights |> 
  select(!year:day)
```

## [`select()`](https://dplyr.tidyverse.org/reference/select.html)

::: panel-tabset
### Seleciona caracteres

```{r}
#| echo: true
flights |> 
  select(where(is.character))
```

### Seleciona números

```{r}
#| echo: true
flights |> 
  select(where(is.double))
```
:::

## [`select()`](https://dplyr.tidyverse.org/reference/select.html)

::: panel-tabset
### Começa com

```{r}
#| echo: true
flights |> 
  select(starts_with("dep"))
```

### Termina com

```{r}
#| echo: true
flights |> 
  select(ends_with("time"))
```
:::

## [`rename()`](https://dplyr.tidyverse.org/reference/rename.html): renomeia as variáveis (colunas)

Altera os nomes de variáveis individuais usando a sintaxe novo_nome = velho_nome

```{r}
#| echo: true
glimpse(flights)
```

## [`rename()`](https://dplyr.tidyverse.org/reference/rename.html): renomeia as variáveis (colunas)

```{r}
#| echo: true
flights |> 
  rename(
    ano = year,
    mes = month,
    dia = day
    )
```

## [`janitor::clean_names()`](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html)

Para bancos de dados com muitas inconsistências

```{r}
#| include: false
#| eval: false

tibble(
  Nome.do.Cliente = c("João", "Maria", "Pedro"),
  ID_Cliente = c(1, 2, 3),
  Endereço_de.Email = c("joao@email.com", "maria@email.com", "pedro@email.com"),
  "Número de Telefone" = c("123456789", "987654321", "555555555")
) |> 
  write_csv("./data/inconsistente.csv")
```

```{r}
#| echo: true
inconsistente <- read_csv("./data/inconsistente.csv")

inconsistente
```

```{r}
#| eval: false
#| echo: true

library(janitor)
```

## [`janitor::clean_names()`](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html)

```{r}
#| echo: true
inconsistente |> 
  clean_names()
```

## [`janitor::clean_names()`](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html)

Não esqueça de salvar as alterações usando operador de atribuição `<-`

```{r}
#| echo: true
consistente <- inconsistente |>
  clean_names()

consistente
```

## [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html)

Use para mover as variáveis (colunas)

```{r}
#| echo: true
glimpse(flights)
```

## [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html)

```{r}
#| echo: true
flights |> 
  relocate(dep_time)
```

## [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html)

É possível escolher a posição em que a variável vai ficar usando `.after` (depois) ou `.before` (antes)

```{r}
#| echo: true
flights |> 
  relocate(dep_time,
           .after  = month)
```

## [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html)

É possível deslocar grupos de variáveis simultaneamente

::: panel-tabset
### Variáveis em sequência

```{r}
#| echo: true
flights |> 
  relocate(dep_delay:arr_delay,
           .before = day)
```

### Quais quer grupos

```{r}
#| echo: true
flights |> 
  relocate(origin, air_time, time_hour,
           .before = 1)
```
:::

## Exercicio

```{r}
countdown(minutes = 2)
```

A partir do banco de dados `flights` crie um novo banco chamado `atrasos` contendo as variáveis `year` (ano), `month` (mês), `day` (dia), `dep_delay` (atraso na decolagem), `arr_delay` (atraso no pouso), `carrier` (companhia). Os nomes das variáveis devem estar em português e a primeira variável deve ser `carrier`.

## Resposta

::: panel-tabset
### Código

```{r}
#| echo: true
atrasos <- flights |> 
  select(year:day, dep_delay,
         arr_delay, carrier) |> 
  rename(
    ano = year, mes = month,
    dia = day, atraso_decolagem = dep_delay,
    atraso_pouso = arr_delay, companhia = carrier
    ) |> 
  relocate(companhia)
```

### Resultado

```{r}
#| echo: true
atrasos
```

### Código alternativo

```{r}
#| echo: true
atrasos_2 <- flights |> 
  select(
    companhia = carrier,
    ano = year, mes = month,
    dia = day, atraso_decolagem = dep_delay,
    atraso_pouso = arr_delay
  )
```
:::

## Grupos

-   [`summarise()`](https://dplyr.tidyverse.org/reference/summarise.html)
-   [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html)
-   [`.by`](https://dplyr.tidyverse.org/reference/dplyr_by.html)

## [`summarise()`](https://dplyr.tidyverse.org/reference/summarise.html)

Resume as estatísticas

```{r}
#| echo: true
flights |> 
  summarise(
    atraso_med_partida = mean(dep_delay,na.rm = T)
    )
```

## Sumário de várias estatísticas

Você pode calcular várias estatísticas de uma só vez

```{r}
#| echo: true
flights |> 
  summarise(
    m_atraso_partida = mean(dep_delay,na.rm = T),
    sd_atraso_partida = sd(dep_delay,na.rm = T),
    n = n()
    )
```

## [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html)

Divide o banco de dados em grupos significativos para a análise, mas não altera o banco

```{r}
#| echo: true
flights |> 
  group_by(month)
```

## [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) {.smaller}

-   O agrupamento é persistente e se propaga nas análises
    -   Se salvar um novo objeto em uma operação com grupamento, desagrupe ao final com `ungroup()`

::: panel-tabset
## Sem desagrupar

```{r}
#| echo: true
flights <- flights |> 
  group_by(month)

flights |> 
  summarise(
    M = mean(dep_delay, na.rm = T)
  )
```

## Desagrupando

```{r}
#| echo: true
flights <- flights |> 
  group_by(month) |> 
  ungroup()

flights |> 
  summarise(
    M = mean(dep_delay, na.rm = T)
  )
```
:::

## [[`summarise()`](https://dplyr.tidyverse.org/reference/summarise.html)]{style="font-size: 36pt"}

Se usado com `group_by()`, mostra uma linha para cada grupo

```{r}
#| echo: true
flights |> 
  group_by(month) |> 
  summarise(
    atraso_medio = mean(dep_delay,na.rm = T),
    n = n()
    )
```

## [[`summarise()`](https://dplyr.tidyverse.org/reference/summarise.html)]{style="font-size: 36pt"} {.smaller}

-   Também pode ser usado com `.by` para mostrar uma linha para cada grupo.
    -   `.by` não é persistente e por isso não propaga o agrupamento

```{r}
#| echo: true
flights |> 
  summarise(
    atraso_medio = mean(dep_delay,na.rm = T),
    n = n(), .by = month
    )
```

## Exercício

```{r}
countdown(minutes = 2)
```

Descubra qual companhia (`carrier`) tem, em média, os menores atrasos na decolagem (`dep_delay`).

::: callout-tip
Você vai precisar da função [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)
:::

## Resposta

```{r}
#| echo: true
flights |> 
  summarise(
    m = mean(dep_delay, na.rm = T),
    .by = carrier
    ) |> 
  arrange(m)
```

## Exercício

```{r}
countdown(minutes = 2)
```

Descubra de qual aeroporto partem (`origin`) os voos com, em média, os maiores atrasos na decolagem (`dep_delay`).

::: callout-tip
Use a função [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) com o argumento `desc()`
:::

## Resposta

```{r}
#| echo: true
flights |> 
  summarise(
    m = mean(dep_delay,na.rm = T),
    .by = origin
    ) |> 
  arrange(desc(m))
```

## Exercício

```{r}
countdown(minutes = 2)
```

Descubra em qual aeroporto chegam (`dest`) os voos com maiores atrasos (`arr_delay`)

## Resposta

```{r}
#| echo: true
flights |> 
  summarise(
    m = mean(arr_delay,na.rm = T),
    .by = dest
    ) |> 
  arrange(desc(m))
```
