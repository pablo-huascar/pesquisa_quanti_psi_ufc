---
title: "Introdução ao R"
subtitle: "Transformação de dados: linhas"
format: 
  revealjs:
      logo: img/brasao1_horizontal_cor_300dpi.png
      theme: simple
      css: logo.css
progress: true
slide-number: true
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
source("./_common.R")
```

```{r}
#| label: setup
#| echo: false
#| include: false
library(tidyverse)
library(nycflights13)
library(countdown)
library(gt)
```

# Introdução {transition="slide"}

## Transformações {.smaller}

-   É raro que os dados estejam da forma certa para fazer análises ou gráficos
-   Transformações:
    -   Criar novas variáveis
    -   Resumir dados
    -   Renomear variáveis
    -   Reordenar casos
-   [`dplyr`](https://dplyr.tidyverse.org/index.html)
-   [`nycflights13`](https://rdrr.io/cran/nycflights13/man/flights.html)

## Pacotes

Carregue os pacotes abaixo:

```{r}
#| eval: false
#| echo: true

library(tidyverse)
library(nycflights13)
```

## [`nycflights13::flights`](https://rdrr.io/cran/nycflights13/man/flights.html) {.smaller}

::: {style="font-size: 14pt;"}
Dados de pontualidade de todos os voos que partiram de Nova York (ou seja, JFK, LGA ou EWR) em 2013 retirados do [US Bureau of Transportation Statistics](http://www.transtats.bts.gov/DatabaseInfo.asp?DB_ID=120&Link=0)

-   Formato: um banco de dados com `r nrow(flights)` observações e `r ncol(flights)` variáveis
    -   `year`, `month`, `day`: data de partida
    -   `dep_time`, `arr_time`: Horários reais de partida e chegada (formato HHMM ou HMM), fuzo horário local
    -   `sched_dep_time`, `sched_arr_time`: horários programados de partida e chegada (formato HHMM ou HMM), fuzo horário local
    -   `dep_delay`, `arr_delay`: atrasos de partida e chegada, em minutos. Tempos negativos representam partidas/chegadas antecipadas
    -   `carrier`: abreviação de transportadora de duas letras. Veja o banco de dados `airlines` para obter os nome
    -   `flight`: número do voo
    -   `tailnum`: Número da cauda do avião. Veja o banco de dados `planes` para metadados adicionais
    -   `origin, dest`: Origem e destino. Veja o banco de dados `airports` para metadados adicionais
    -   `air_time`: quantidade de tempo gasto no ar, em minutos
    -   `distance`: distância entre aeroportos, em milhas
    -   `hour`, `minute`: horário de partida programado dividido em horas e minutos
    -   `time_hour`: Data e hora programadas do voo como uma data `POSIXct`. Junto com a `origin`, pode ser usado para unir dados de voos a dados meteorológicos (veja o banco de dados `weather`)
:::

## [`nycflights13::flights`](https://rdrr.io/cran/nycflights13/man/flights.html)

```{r}
#| label: flights
#| echo: true
flights
```

## [`nycflights13::flights`](https://rdrr.io/cran/nycflights13/man/flights.html) {.smaller}

-   tibble: tipo especial de banco de dados usado pelo [`tydiverse`](https://www.tidyverse.org/)
-   projetados para grandes conjuntos de dados
    -   mostram apenas as primeiras linhas e apenas as colunas que cabem na tela
    -   para ver todas as colunas: `glimpse`

## [`nycflights13::flights`](https://rdrr.io/cran/nycflights13/man/flights.html)

```{r}
#| label: flights-glimpse
#| echo: true
glimpse(flights)
```

## [`nycflights13::flights`](https://rdrr.io/cran/nycflights13/man/flights.html) {.smaller}

-   Tipo de cada variável
    -   `<int>`: números inteiros
    -   `<dbl>`: números reais
    -   `<chr>`: caracteres
    -   `<dttm>`: data e hora

## Banco para exercícios: [`mpg`](https://ggplot2.tidyverse.org/reference/mpg.html) {.smaller}

::: {style="font-size: 14pt;"}
Este conjunto de dados contém um subconjunto dos dados de economia de combustível que a EPA disponibiliza em https://fueleconomy.gov/. Ele contém apenas modelos que tiveram um novo lançamento a cada ano entre 1999 e 2008 - isso foi usado como um proxy para a popularidade do carro.

-   Formato: Um banco de dados com `r nrow(mpg)` observações e `r ncol(mpg)` variáveis
    -   `manufacturer`: nome do fabricante
    -   `model`: nome do modelo
    -   `displ`: cilindrada do motor, em litros
    -   `year`: ano de fabricação
    -   `cyl`: número de cilindros
    -   `trans`: tipo de câmbio (transmissão)
    -   `drv`: tipo de tração
    -   `cty`: milhas por galão na cidade
    -   `hwy`: milhas por galão na estrada
    -   `fl`: tipo de combustível
    -   `class`: tipo de carro
:::

## Exercício {.smaller}

```{r}
countdown(minutes = 1)
```

-   Use a função `glimpse` para olhar as variáveis do banco `mpg`

## Resposta

```{r}
#| label: glimpse-mpg
#| echo: true

glimpse(mpg)
```

## O Básico do `dplyr` {.smaller}

-   Verbos do dplyr (funções): manipulação de dados
    -   Primeiro argumento: banco de dados
    -   Argumentos subsequentes: quais colunas operar
        -   Nomes das variáveis sem aspas
    -   Saída: novo banco de dados

## O Básico do `dplyr`

```{r}
#| echo: true

filter(mpg, manufacturer == "ford")
```

## O Básico do `dplyr`

```{r}
#| echo: true

select(mpg, model)
```

## O Básico do `dplyr` {.smaller}

pipe: `|>`: "e então"

```{r}
#| label: pipe
#| echo: true

mpg |> 
  glimpse()
```

## Configurar o RStudio para usar o pipe nativo (`|>`)

![](img/config-pipe-nativo.png){fig-align="center"}

## `|>`

```{r}
#| echo: true
#| label: pipe-2

mpg |> 
  filter(manufacturer == "audi") |> 
  group_by(trans) |> 
  summarise(
    "média na cidade" = mean(cty),
    "média na rodovia" = mean(hwy)
    )
```

## `|>` {.smaller}

-   Atalho de teclado (windows)
    -   ctrl + shift + m
-   Atalho de teclado (mac os)
    -   cmd + shift + m

# Linhas - rows

## Funções para as linhas (casos/sujeitos/observações) {.smaller}

-   [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)
-   [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html)
-   [`distinct()`](https://dplyr.tidyverse.org/reference/arrange.html)

## [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) {.smaller}

-   filtra (mantém \| deixa passar) linhas baseado em valores das colunas (variáveis)
-   primeiro argumento: banco de dados
-   segundo e subsequentes: condições que devem ser verdade para manter a linha (caso)

## [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)

```{r}
#| echo: true
flights |> 
  filter(dep_delay > 120)
```

## Exercício

```{r}
countdown(minutes = 2)
```

No banco de dados `mpg`, encontre os carros que tem um rendimento na cidade maior do que 17 milhas por galão (`cty`)

## Resposta

```{r}
#| label: exercicio-filter-mpg
#| echo: true

mpg |> 
  filter(cty > 17)
```

## Operadores lógicos {.smaller}

-   `>` maior que
-   `>=` maior ou igual que
-   `<` menor que
-   `<=` menor ou igual que
-   `==` igual a
-   `!=` não é igual a

## Operadores lógicos {.smaller}

-   Combinar codições:
    -   `&` "e" ("verifique ambas as condições")
    -   `,` "e" ("verifique ambas as condições")
    -   `|` "ou" ("verifique qualquer uma das condições")

## Operadores lógicos

```{r}
#| label: voos-1-de-janeiro
#| echo: true

flights |> 
  filter(day == 1 & month == 1)
```

## Exercício

```{r}
countdown(minutes = 2)
```

No banco de dados `mpg`, encontre os carros da fabricante (`manufacturer`) "jeep" que têm 6 cilindros (`cyl`)

## Resposta

```{r}
#| label: exercicio-filter-&
#| echo: true
mpg |> 
  filter(manufacturer == "jeep" & cyl == 6)
```

## Resposta

```{r}
#| label: exercicio-filter-&-alternativa)
#| echo: true
mpg |> 
  filter(manufacturer == "jeep", cyl == 6)
```

## Operadores lógicos

```{r}
#| label: voos-janeiro-fevereiro
#| echo: true

flights |> 
  filter(month == 1 | month == 2)
```

## Operadores lógicos

```{r}
#| label: "%in%"
#| echo: true

# jução do `==` e do `|`

flights |> 
  filter(month %in% c(1,2))
```

## Operadores lógicos

```{r}
#| echo: true

# jução do `==` e do `|`

flights |> 
  filter(month %in% c(1,2,6,11))
```

## Exercício

```{r}
countdown(minutes = 2)
```

No banco de dados `mpg`, localize os carros que tem 6 ou 8 cilindors (`cyl`)

## Resposta

```{r}
#| label: exercicio-filter-|
#| echo: true

mpg |> 
  filter(cyl == 6 | cyl == 8)
```

## Resposta

```{r}
#| label: exercicio-filter-|-alternativa
#| echo: true

mpg |> 
  filter(cyl %in% c(6,8))
```

## Exercício

No banco de dados `mpg`, ache os carros que foram fabricados (`manufacturer`) pelas marcas honda, nissan ou toyota

## Resposta

```{r}
#| label: exercício-filter-%in%
#| echo: true

mpg |> 
  filter(manufacturer %in% c("honda", "nissan", "toyota"))
```

## Resposta

```{r}
#| label: exercício-filter-%in%-alternativa
#| echo: true

mpg |> 
  filter(manufacturer == "honda" | manufacturer == "nissan" | manufacturer == "toyota")

```

## [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) {.smaller}

-   Nunca altera o banco de dados original
-   É criado um novo banco de dados
-   Para salvar o novo banco de dados, use o operador de atribuição `<-`

## [`filter()`](https://dplyr.tidyverse.org/reference/filter.html)

```{r}
#| echo: true
jan1 <- flights |> 
  filter(month == 1, day == 1)

jan1
```

## Exercício

```{r}
countdown(minutes = 2)
```

A partir do banco de dados `mpg`, salve um novo banco de dados chamado `ford` com todos os carros fabricados (`manufacturer`) por esta marca.

## Resposta

```{r}
#| label: exe-salvar-dados-filtrados
#| echo: true

ford <- mpg |> 
  filter(manufacturer == "ford")

ford
```

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) {.smaller}

-   Muda a ordem das linhas baseado nos valores das colunas

::: panel-tabset
### Sem ordem

```{r}
#| label: variavel-sem-ordem
#| echo: true

flights  
```

### Atraso na partida

```{r}
#| label: exemplo-de-arranje
#| echo: true

flights |> 
  arrange(dep_delay)
```
:::

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) {.smaller}

-   Mais de um nome de coluna
    -   Cada coluna adicional desempata os valores das colunas anteriores

```{r}
#| echo: true

flights |> 
  arrange(dep_delay, arr_time)
```

## [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) {.smaller}

-   Para ver do maior pro menor: `desc()`

```{r}
#| echo: true

flights |> 
  arrange(desc(dep_delay))
```

## Exercício

```{r}
countdown(minutes = 2)
```

No banco `mpg`, identifique o modelo com pior rendimento na cidade (`cty`)

## Resposta

```{r}
#| echo: true 
mpg |> 
  arrange(cty)
```

## Exercício

```{r}
countdown(minutes = 2)
```

No banco `mpg`, encontre o modelo com melhor rendimento na estrada (`hwy`)

## Resposta

```{r}
#| echo: true
mpg |> 
  arrange(desc(hwy))
```

## Exercício

```{r}
countdown(minutes = 2)
```

No banco `mpg`, ache o carro da marca ford (`manufacturer`) com melhor rendimento na cidade (`cty`)

## Resposta

```{r}
#| echo: true
mpg |> 
  filter(manufacturer == "ford") |> 
  arrange(desc(cty))
```

## [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) {.smaller}

-   Localiza todas as linhas únicas em um conjunto de dados

::: panel-tabset
### Origem

```{r}
#| echo: true
flights |> 
  distinct(origin)
```

### Destino

```{r}
#| echo: true
flights |> 
  distinct(dest)
```

### Selecionar todas as combinações únicas de origem e destino

```{r}
#| echo: true
flights |> 
  distinct(origin,dest)
```
:::

## Exercício

```{r}
countdown(minutes = 2)
```

Quais são os fabricantes (`manufacturer`) encontrados no banco `mpg`

## Resposta

```{r}
#| echo: true
mpg |> 
  distinct(manufacturer)
```

## Exercícios

```{r}
countdown(minutes = 2)
```

No banco `mpg`, crie uma tabela com os fabricantes (`manufacturer`) e seus respectivos modelos (`model`)

## Resposta

```{r}
#| echo: true
mpg |> 
  distinct(manufacturer,model) 
```

## [`count()`](https://dplyr.tidyverse.org/reference/count.html) {.smaller}

-   Conta o número de ocorrências em cada categoria

::: panel-tabset
### *N* de voos na origem

```{r}
#| echo: true
flights |> 
  count(origin)
```

### *N* de voos no destino

```{r}
#| echo: true
flights |> 
  count(dest)
```

### *N* de voos no destino agrupados pela origem

```{r}
#| echo: true
flights |> 
  count(origin, dest) 
```
:::

## [`count()`](https://dplyr.tidyverse.org/reference/count.html) {.smaller}

-   O argumento `sort = TRUE` mostra o número de ocorrências em ordem descendente

```{r}
#| echo: true
flights |> 
  count(dest, sort = T)
```

## Exercício

```{r}
countdown(minutes = 2)
```

A partir do banco `mpg`, crie uma tabela de frequência dos fabricandes (`manufacturer`)

## Resposta

```{r}
#| echo: true
mpg |> 
  count(manufacturer)
```

## Exercício

```{r}
countdown(minutes = 2)
```

Agora, mostre a quantidade de ocorrências somente do fabricante (`manufacturer`) jeep

## Resposta

```{r}
#| echo: true
mpg |> 
  filter(manufacturer == "jeep") |> 
  count(manufacturer)
```

## Exercício

```{r}
countdown(minutes = 2)
```

A partir do banco `mpg`, crie uma tabela de frequência dos fabricandes (`manufacturer`) e seus respectivos modelos (`model`)

## Resposta

```{r}
#| echo: true
mpg |> 
  count(manufacturer, model)
```

## Exercício {.smaller}

```{r}
countdown(minutes = 6)
```

-   Em um único pipeline para cada condição, encontre todos os voos que atendem à condição:
    -   Tiveram um atraso de chegada de duas ou mais horas;
    -   Voaram para Houston (IAH ou HOU);
    -   Foram operados pela United, American ou Delta;
    -   Partiram no verão (julho, agosto e setembro);
    -   Chegaram com mais de duas horas de atraso, mas não saíram atrasados.

## Exercício

Tiveram um atraso de chegada (`arr_delay`) de duas ou mais horas

## Resposta

```{r}
#| echo: true
flights |> 
  filter(arr_delay >= 120)
  
```

## Exercício

Voaram para Houston (IAH ou HOU - `dest`)

## Resposta

```{r}
#| echo: true
flights |> 
  filter(dest %in% c("IAH","HOU"))
```

## Exercício

Foram operados (`carrier`) pela United, American ou Delta. Podemos encontrar os códigos da transportadora para as companhias aéreas no banco de dados `airlines`

## Resposta

```{r}
#| echo: true
flights |> 
  filter(carrier %in% c("UA","AA","DL"))
```

## Exercício

Partiram no verão (julho, agosto e setembro - `month`).

## Resposta

```{r}
#| echo: true
flights |> 
  filter(month %in% c(7,8,9))
```

## Exercício

Chegaram com mais de duas horas de atraso (`arr_delay`), mas não saíram atrasados (`dep_delay`).

## Resposta

```{r}
#| echo: true
flights |> 
   filter(arr_delay > 120 &  dep_delay <= 0)
```

## Exercício

```{r}
countdown(minutes = 2)
```

Organize o banco de dados `flights` para encontrar os voos com os maiores atrasos de partida (`dep_delay`) mais longos

## Resposta

```{r}
#| echo: true
flights |> 
  arrange(desc(dep_delay))
```

## Exercícios

```{r}
countdown(minutes = 2)
```

Houve um voo em todos os dias de 2013?

## Resposta 1

```{r}
#| echo: true
flights  |> 
  filter(year == 2013)  |>
  distinct(month, day) |> 
  count(month)
  
```

## Resposta 2

```{r}
#| echo: true
flights |> 
  filter(year == 2013) |> 
  distinct(month,day) |> 
  count(day) |> 
  print(n = Inf)
```

## Resposta 3

```{r}
#| echo: true
flights |> 
  distinct(year, month, day) |> 
  nrow()
```

## Exercício

```{r}
countdown(minutes = 2)
```

Quais voos viajaram a maior distância (`distance`)? Quais viajaram a menor distância?

## Resposta

```{r}
#| echo: true
flights |> 
  arrange(distance)
```

## Resposta

```{r}
#| echo: true
flights |> 
  arrange(desc(distance)) 
```
