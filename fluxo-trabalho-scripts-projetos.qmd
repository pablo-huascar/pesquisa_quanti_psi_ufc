---
title: "Introdução ao R"
subtitle: "Fluxo de trabalho: projetos, scripts e pacotes"
format: 
  revealjs:
      logo: img/brasao1_horizontal_cor_300dpi.png
      code-link: true
      code-tools: true
      code-line-numbers: false
      theme: simple
      css: logo.css
progress: true
slide-number: true
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
source("C:/projetos-r/pesquisa-quanti-psi-ufc/_common.R")
```

```{r}
#| label: setup
#| echo: false
#| include: false
library(countdown)
```

# Projetos {transition="slide"}

## Para que servem os projetos? {.smaller}

-   Organização do trabalho: permitem manter todos os arquivos relacionados (scripts, dados, resultados) em uma única pasta, facilitando o gerenciamento

-   Retomada fácil: facilitam o retorno à análise em outro momento, mantendo o ambiente configurado e os arquivos acessíveis

-   Múltiplas análises simultâneas: ajudam a separar diferentes projetos, evitando confusão entre análises distintas

-   Fluxo de dados: simplificam a importação de dados externos e a exportação de resultados e gráficos para uso fora do R

## Para que servem os projetos? {.smaller}

-   Fonte da verdade: estabelecem um registro duradouro e consistente do trabalho realizado, essencial para reprodutibilidade

-   Colaboração: facilitam o compartilhamento e a colaboração com outros, mantendo uma estrutura de projeto clara e organizada

-   Ambiente isolado: garantem que as configurações e pacotes usados no projeto não afetem outros trabalhos, evitando conflitos

-   Reprodutibilidade: ajudam a garantir que a análise possa ser replicada no futuro ou por outras pessoas, mantendo todos os componentes necessários juntos

## Criação de um projeto - Passo 1

![](img/new_project.png){fig-align="left" width="1000"}

## Criação de um projeto - Passo 2

![](img/passo2.png)

## Criação de um projeto - Passo 3

![](img/passo_3.png){fig-align="left"}

## 

::: callout-tip
-   É muito importante que todos os arquivos do projeto fiquem dentro de uma mesma pasta
-   A pasta “raiz” não pode conter caracteres especiais
-   Sugestão: crie uma pasta projetos-r dentro da pasta “C:” do Windows e, dentro dela, crie sub pastas para cada projeto
:::

## Criação de um projeto - Passo 4

![](img/passo_4.png){width="710"}

## E você vai chegar aqui

![](img/passo_final.png)

# Scripts {transition="slide"}

## Editor de scripts {.smaller}

-   O console é um bom lugar pra começar, mas pode ficar apertado
-   Códigos mais longos precisam de mais espaço
-   Quando quiser mudar algo, não precisa digitar tudo de novo
    -   Apenas edite o script e execute novamente
-   Salve um arquivo de script para retornar facilmente mais tarde

## Editor de scripts

Para abrir um script use Ctrl + Shift + N ou faça como nas imagens

![](img/iniciar_script.png){fig-align="center"}

![](img/script_creat_1.png){fig-align="center" width="917"}

## Paineis do R Studio

![](img/paineis_branco.png)

## Ajuste dos paineis

![](img/ajuste_paineis.png){width="594"}

## Source Code

::::: columns
::: {.column width="30%"}
É onde o código é escrito. Vários tipos de arquivos podem ser utilizados: Scripts, Rmarkdown, Quarto etc.
:::

::: {.column width="70%"}
![](img/script.png){fig-align="center" width="672"}
:::
:::::

## Console

Mostra a saída do que é feito no source code. Também pode ser usado para escrever códigos, mas não é possível salvá-los

![](img/console.png){fig-align="left" width="900"}

## Environment/History

![](img/environment.png){fig-align="left" width="706"}

No environment estão os diversos objetos que são criados pelo código: vetores, dataframes (bancos de dados), tibbles etc.

## File/Plots/Packages/Help

Neste painel são mostrados os arquivos do projeto, os gráficos produzidos, a ajuda e informações sobre os pacotes (instalar, ativar, desativar etc).

![](img/files.png){fig-align="left"}

## File/Plots/Packages/Help

![](img/plots.png)

## Cheat Sheets {transition="slide"}

::::: columns
::: {.column width="50%"}
[![](img/rstudio-ide-1.png)](https://rstudio.github.io/cheatsheets/html/rstudio-ide.html?_gl=1*7odx2p*_ga*MTQyNTUwMTY5MS4xNzIxNDk1NjA2*_ga_2C0WZ1JHG0*MTcyODc3MDYyOS4yMC4wLjE3Mjg3NzA2MjkuMC4wLjA.)
:::

::: {.column width="50%"}
[![](img/rstudio-ide-2.png)](https://rstudio.github.io/cheatsheets/html/rstudio-ide.html?_gl=1*7odx2p*_ga*MTQyNTUwMTY5MS4xNzIxNDk1NjA2*_ga_2C0WZ1JHG0*MTcyODc3MDYyOS4yMC4wLjE3Mjg3NzA2MjkuMC4wLjA.)
:::
:::::

## Execução de códigos no script

-   Coloque o cursor onde quer executar e pressione Ctrl + Enter ou
-   Clique em Run

![](img/rodar_codigo.png)

## Execução de códigos no script {.smaller}

::: {style="font-size: 16pt;"}
-   Ao executar um bloco de código com Ctrl + Enter, o cursor se move para o próximo bloco

-   Isso facilita a execução do script completo pressionando repetidamente Ctrl + Enter

![](img/cursor_exe_code.mp4){.data-autoplay}
:::

## Exercício {.smaller}

```{r}
countdown(minutes = 3)
```

-   No Script que foi criado:
    -   Use a função `data()` para ver bancos de dados disponíveis no R
    -   Escolha um banco de dados que tenha uma variável numérica
    -   Você seleciona uma variável num banco usando `$`:
        -   `banco_de_dados$variavel`
    -   digite `banco_de_dados$` e pressione TAB para as variáveis disponíveis
    -   Gere um histograma (`hist()`) com a variável numérica escolhida

## Resposta

```{r}
#| echo: true
hist(iris$Sepal.Length)
```

## Execução de códigos no Script {.smaller}

-   Você também pode rodar todo o código com
    -   Ctrl + Shift + S (sem echo[^1])
    -   Ctrl + Shift + Enter (com echo)
-   Fazer isso regularmente garante que você capturou todas as partes importantes do seu código no script

[^1]: Ver o que o código faz

## Diagnósticos RStudio {.smaller}

No editor de script, o RStudio destacará erros de sintaxe com uma linha vermelha ondulada e uma cruz na barra lateral:

![](img/rstudio-diagnostic.png){width="200" height="67"}

Passe o mouse sobre a cruz para ver qual é o problema:

![](img/rstudio-diagnostic-tip.png){width="200"}

O RStudio também informará você sobre possíveis problemas:

![](img/rstudio-diagnostic-warn.png){width="300"}

## Salvando e nomeando {.smaller}

-   O RStudio salva automaticamente o conteúdo do editor de scripts quando você sai e o recarrega automaticamente quando você o reabre
-   Evite Untitled1, Untitled2, Untitled3
-   Salve seus scripts e dê a eles nomes informativos

## Orientações para os nomes dos arquivos {.smaller}

-   Os nomes de arquivo devem legíveis por máquina:
    -   Evite espaços, símbolos e caracteres especiais
    -   Não confie na diferenciação entre maiúsculas e minúsculas para distinguir arquivos
-   Os nomes de arquivo devem ser legíveis por humanos:
    -   Use nomes de arquivo para descrever o que há no arquivo
    -   Comece os nomes de arquivo com números para que a classificação alfabética os coloque na ordem em que são usados

## Quais os problemas com esses nomes? {.smaller}

```{r}
#| eval: false
#| echo: true
modelo alternativo.R
código para análise exploratória.R
relatoriofinal.qmd
RelatorioFinal.qmd
fig 1.png
Figura_02.png
modelo_primeira_tentativa.R
rodar-primeiro.R
temp.txt
```

-   É difícil encontrar qual arquivo executar primeiro
-   Os nomes dos arquivos contêm espaços
-   Há dois arquivos com o mesmo nome, mas com capitalização diferente
-   Alguns nomes não descrevem o conteúdo dos arquivos

## Um jeito melhor de nomear e organizar os arquivos {.smaller}

```{r}
#| eval: false
#| echo: true
01-carregar-dados.R
02-analise-exploratoria.R
03-modelo-1.R
04-modelo-2.R
fig-01.png
fig-02.png
relatorio-20-03-2024.qmd
relatorio-02-04-2024.qmd
relatorio-rascunho.txt
```

-   Numerar os scripts principais torna óbvio em que ordem executá-los
-   Um esquema de nomenclatura consistente torna mais fácil ver o que varia
-   As figuras são rotuladas de forma semelhante
-   Os relatórios são diferenciados por datas incluídas nos nomes dos arquivos
-   temp é renomeado para relatorio-rascunho para descrever melhor seu conteúdo

## 

::: callout-tip
Se você tem muitos arquivos em um diretório, é recomendável levar a organização um passo adiante e colocar diferentes tipos de arquivos (scripts, figuras, etc.) em diretórios diferentes
:::

## Qual a fonte da verdade? {.smaller}

-   Como iniciante, é comum depender do environment para armazenar os objetos criados durante a análise
-   Contudo, para facilitar trabalhos maiores ou colaboração, seus scripts R devem ser a fonte de verdade
-   Com seus scripts e arquivos de dados, você pode recriar todo o ambiente facilmente
-   Ao depender apenas do environment, é difícil recriar os scripts:
    -   Terá que reescrever código de memória, cometendo erros
    -   Ou precisar vasculhar o histórico do R cuidadosamente

## Não preservar o workspace {.smaller}

-   Recomenda-se configurar o RStudio para não preservar o workspace entre as sessões:
    -   Execute usethis::use_blank_slate() no início do código ou

## Não preservar o workspace {.smaller}

Ajuste as opções nas configurações do RStudio

![](img/clean-slate.png){width="726"}

## A casa do seu projeto

```{r}
#| echo: true
getwd()
```

## Salvando o seu projeto {.smaller}

-   Digite o código abaixo no editor de script do RStudio
-   Salve o arquivo com o nome "carros.R"
-   Crie uma nova pasta chamada "data"
    -   No RStudio, vá ao painel Files e clique no botão "New Folder"\
-   Execute todo o script que você escreveu
-   O script irá salvar um arquivo PNG e um arquivo CSV no diretório do seu projeto

```{r}
#| echo: true
#| eval: false
data("mtcars")
png("carros.png")
hist(mtcars$mpg)
dev.off()
write.csv(mtcars, "./data/carros.csv")
```

## Fechando e reabrindo o RStudio {.smaller}

-   Saia do RStudio completamente
-   Inspecione a pasta do projeto:
    -   Navegue até a pasta associada ao seu projeto
    -   Observe o arquivo com extensão .Rproj
-   Reabra o projeto:
    -   Dê um duplo clique no arquivo .Rproj para reabrir o projeto no RStudio
    -   Você retornará ao mesmo diretório de trabalho e histórico de comandos
    -   Todos os arquivos em que estava trabalhando continuam abertos
    -   Como configurado anteriormente, o ambiente estará completamente limpo

## Localizando arquivos gerados e scripts {.smaller}

-   Buscar arquivos no computador:
    -   Use o método de busca do seu sistema operacional para procurar por carros.png
    -   Você encontrará o arquivo de imagem carros.png.\
    -   Além disso, encontrará o script que o gerou (carros.r).

# Pacotes (packages) {transition="slide"}

## O que é um pacote?

-   Coleção de funções, objetos e documentação
-   Estendem as capacidades do R e adicionam novos recursos
-   Criados pela comunidade

## Como instalar um pacote

```{r}
#| echo: true
#| eval: false

install.packages("tidyverse")
```

-   Só precisa ser feito uma vez
-   Não coleque a instalação dos pacotes no script
    -   Se o arquivo for compartilhado, não é legal modificar as configurações de outra pessoa

## Como carregar o pacote

```{r}
#| echo: true
library(tidyverse)
```

-   Precisa ser feito em cada novo script
-   A cada novo uso do script
-   Colocar todos os pacotes no início do script

## Como obter informações sobre as funções do pacote

```{r}
#| echo: true
#| eval: false
library(tidyverse)
?tidyverse
```

## Exercício

```{r}
countdown(minutes = 2)
```

Instale os seguintes pacotes: `tidyverse`, `car` e `psych`

## Resposta

```{r}
#| echo: true
#| eval: false

install.packages("tidyverse")
install.packages("car")
install.packages("psych")
```

## Exercício

```{r}
countdown(minutes = 2)
```

Carregue os pacotes que foram instalados anteriormente

## Resposta

```{r}
#| echo: true
library(tidyverse)
library(car)
library(psych)
```
