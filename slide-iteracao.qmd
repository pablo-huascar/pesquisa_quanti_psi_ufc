---
title: "Introdução ao R"
subtitle: "Iteração"
format: 
  revealjs:
      logo: img/brasao1_horizontal_cor_300dpi.png
      code-link: true
      code-tools: true
      code-line-numbers: false
      theme: simple
      css: logo.css
progress: true
slide-number: true
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
library(tidyverse)
library(nycflights13)
```

## Introdução

-   Iteração: executar repetidamente a mesma ação em diferentes objetos
-   Evitar copiar e colar código mais de 2 vezes
    -   Erros que se propagam no código

## Pacotes

```{r}
#| echo: true
#| eval: false
library(tidyverse)
library(nycflights13)
```

## Criação de um banco dummy

```{r}
#| echo: true
df <- tibble(
  a = rnorm(10),
  b = rnorm(10),
  c = rnorm(10),
  d = rnorm(10)
)
```

```{r}
#| echo: true
df
```

## Exemplos de repetição de código

```{r}
#| echo: true
df |> summarize(
  n = n(),
  a = median(a),
  b = median(b),
  c = median(c),
  d = median(d),
)
```

-   Repetir a digitação de `median()` várias vezes ou copiar e colar

## `across()`

-   `.cols =`: especifica quais colunas vão estar na iteração
-   `.fns =`: diz o que fazer com as colunas
    -   Qual função aplicar

```{r}
#| echo: true
df |> 
  summarise(
    across(.cols = a:d,.fns = median)
  )
```

::: aside
O nome da função solicitada nunca deve ser seguido por ()
:::

## `across()`

-   É possível omitir os argumentos `.cols` e `.fns`

```{r}
#| echo: true
df |> 
  summarise(
    across(a:d, mean)
  )
```

## Exercício

No banco de dados `economics` calcule a média das variávels `pce`, `pop` e `psavert` usando a função across

## Resposta - parte 1 {.smaller}

```{r}
#| echo: true
glimpse(economics)
```

## Reposta - parte 2

```{r}
#| echo: true
economics |> 
  summarise(
    across(pce:psavert, mean)
  )
```

## Selecionando columas com `.cols`

-   Usa as mesmas especificações que `select()`
    -   `starts_with()`
    -   `ends_with()`
    -   `contains()`

## Selecionando columas com `.cols` {.smaller}

```{r}
#| echo: true
glimpse(economics)
```

## Selecionando columas com `.cols`

```{r}
#| echo: true
economics |> 
  summarise(
    across(starts_with("p"),  mean)
  ) 
```

## Exercício

Salve o banco de dados a seguir no objeto `treinos` e, em seguida, dê uma olhada no arquivo

```{r}
#| eval: false
tibble(
  idade = c(20, 30, 40, 50, 60),
  altura = c(1.60, 1.70, 1.80, 1.90, 2.00),
  genero = c("masculino", "masculino", "feminino", "feminino", "feminino"),
  fumante = c("sim", "não", "não", "sim", "sim"),
  risco_cardiaco = c("sim", "não", "sim", "não", "sim"),
  peso_1 = c(60, 70, 80, 90, 100),
  peso_2 = c(61, 71, 81, 91, 101),
  peso_3 = c(62, 72, 82, 92, 102),
  refeicao_preferida = c("arroz e feijão", "pizza", "macarrão", "sushi", "sopa"),
  treinos_por_semana = c(3, 4, 5, 6, 7),
  treinador = c("Julia", "Hadley", "Jesse", "Julia", "Hadley"),
  total_colesterol = c(200, 220, 240, 260, 280),
  ruim_colesterol = c(100, 120, 140, 160, 180),
  bom_colesterol = c(100, 100, 100, 100, 100)
) |> 
  write_csv("./data/treinos.csv")

```

```{r}
treinos <- read_csv("./data/treinos.csv")
```

```{r}
#| echo: true
#| eval: false
treinos <- read_csv("https://tinyurl.com/treinndf")
```

## Resposta {.smaller}

```{r}
#| echo: true
glimpse(treinos)
```

## Exercício

Calcule a média das variáveis que iniciam com `peso` usando uma das especificações de seleção que foi apresentada anteriormente

## Resposta

```{r}
#| echo: true
treinos |> 
  summarise(
    across(starts_with("peso"), mean)
  )
```

## Exercício

Calcule a média das variáveis que terminam com `colesterol` usando uma das especificações de seleção que foi apresentada anteriormente

## Resposta

```{r}
#| echo: true
treinos |> 
  summarise(
    across(ends_with("colesterol"), mean)
  )
```

## Selecionando columas com `.cols`

-   Opções espefícidas de `across()`
    -   `everything()`: seleciona toda coluna que não seja de agrupamento
    -   `where()`: seleciona colunas baseado seus tipos

## `everything()`

```{r}
#| echo: true
df |> 
  slice_head(n = 5)
```

```{r}
#| echo: true
df |> 
  summarise(
    across(everything(),mean)
  )
```

## `where()`

-   where(is.numeric) seleciona todas as colunas numéricas.
-   where(is.character) seleciona todas as colunas de string.
-   where(is.Date) seleciona todas as colunas de data.
-   where(is.POSIXct) seleciona todas as colunas de data e hora.
-   where(is.logical) seleciona todas as colunas lógicas.

## `where()` {.smaller}

```{r}
#| echo: true
glimpse(economics)
```

## `where()`

```{r}
#| echo: true
economics |> 
  summarise(
    across(where(is.numeric), mean)
  )
```

## Exercício

Calcule a média de todas as variáveis numéricas do banco de dados `treinos`

## Resposta

```{r}
#| echo: true
treinos |> 
  summarise(
    across(where(is.numeric), mean)
  )
```

## Chamando mais de um função dentro de `.fns` {.smaller}

-   Use a função `list()` para chamar mais de um função
-   É importante nomear as funções: nome = funcão

```{r}
#| echo: true
economics |> 
  summarise(
    across(pce:pop, 
           list(
             M = mean, 
             DP = sd,
             MIN = min, 
             MAX = max)
    )
  ) 
```

## Exercício

Calcule a média e o desvio padrão das variáveis idade e altura do banco de dados `treinos`

## Resposta

```{r}
#| echo: true
treinos |> 
  summarise(
    across(idade:altura, list(
      M = mean, 
      DP = sd
    ))
  )
```

## Usando argumentos dentro das funções chamadas em `.fns` {.smaller}

```{r}
#| echo: true
glimpse(flights)
```

## Usando argumentos dentro das funções chamadas em `.fns` {.smaller}

-   Se há um caso com valores ausentes (`NA`) a função retorna `NA`
-   É necessário usar o argumento `na.rm = T` para resolver esse problema

```{r}
#| echo: true
flights |> 
  summarise(
    across(ends_with("delay"), mean)
  )
```

## Usando argumentos dentro das funções chamadas em `.fns` {.smaller}

-   É possível chamar criar uma função anônima usando `\(x)`
-   `x` vai representar todas as variáveis para s quais queremos obter a média

```{r}
#| echo: true
flights |> 
  summarise(
    across(ends_with("delay"),
           \(x) mean(x, na.rm = T))
  )
```

## Usando argumentos dentro das funções chamadas em `.fns` {.smaller}

-   Também possível fazer o mesmo chando várias funções dentro de `.fns` com `list()`

```{r}
#| echo: true
flights |> 
  summarise(
    across(ends_with("delay"),
           list(
             M = \(x) mean(x, na.rm = T),
             SD = \(x) sd(x, na.rm = T)
           )),
    n = n()
  )
```
