---
title: Função PROCESS para R
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
source("./_common.R")
#source("./process.R")
```

A função `process()` foi desenvolvida por Andrew F. Hayes e está descrita e documentada no livro [“Introduction to Mediation, Moderation, and Conditional Process Analysis”](https://www.afhayes.com/introduction-to-mediation-moderation-and-conditional-process-analysis.html){target="_blank"}. Ela pode ser baixada aqui:

<https://haskayne.ucalgary.ca/CCRAM/resource-hub>

## Uso

```{r}
#| echo: true
#| eval: false  
process(
  data,
  y, #####
  x, #####
  m = NULL, #####
  w = NULL, #####
  z = NULL, #####
  cov = NULL, #####
  model = NULL, #####
  converge = 0.0001, #####
  iterate = 100, #####
  hc = NULL, #####
  jn = 0, #####
  effsize = 0, #####
  stand = 0, ####
  xmtest = 0, #####
  normal = 0, #####
  mdichok = NULL,
  contrast = NULL,
  modelbt = 0, #####
  matrices = 0,
  covmy = 0,
  covcoeff = 0,
  boot = 5000, #### 
  mc = 0, #####
  intprobe = 0.10,
  plot = 0, #####
  total = 0, #####
  save = 0, #####
  mcx = 0, #####
  mcw = 0, #####
  mcz = 0, ####
  moments = 0,
  progress = 1, #####
  exclude = NULL,
  bmatrix = NULL,
  wmatrix = NULL,
  zmatrix = NULL,
  wzmatrix = NULL,
  cmatrix = NULL,
  xcatcode = NULL,
  wcatcode = NULL,
  zcatcode = NULL,
  wmodval = NULL,
  zmodval = NULL,
  center = 0, #####
  conf = 95, #####
  seed = NULL, ####
  decimals = 10.4, #####
  maxboot = 10000,
  modelres = 0,
  bc = 0, #####
  outscreen = 1, #####
  activate = NULL,
  describe = 0, #####
  listmiss = NULL,
  linsum = NULL,
  xmint = NULL,
  xrefval = NULL,
  coval = NULL,
  cdeval = NULL
)
```

## Argumentos

**data**: O conjunto de dados contendo as variáveis necessárias para a análise.

**y**: Uma string especificando a variável dependente.

**x** : Uma string especificando a variável independente.

**m**: Um vetor com strings de variáveis mediadoras.

**w**: Uma string especificando a variável moderadora.

**z**: Uma string especificando uma variável moderadora adicional .

**cov**: Um vetor de covariáveis a serem incluídas no modelo.

**model**: Um número inteiro especificando o modelo predefinido.

**converge**: Critério de convergência para regressão logística (padrão: .0001). O critério de convergência é atendido quando mudanças nos coeficientes de regressão logística resultam em uma mudança na probabilidade de menos do que o critério especificado. Nesse ponto, a iteração para e a solução é fornecida. Uma falha na convergência pode às vezes ser retificada aumentando o número de iterações ou aumentando o critério de convergência. No entanto, isso aumentará o tempo computacional. Isso pode ser feito com as opções `iterate` e `converge`.

**iterate**: Número máximo de iterações para regressão logística (padrão: 100).

**hc**: Método para erros padrão heterocedásticos (0, 1, 2, 3 ou 4). Por padrão, o PROCESS usa um estimador para os erros padrão dos coeficientes de regressão que assumem homocedasticidade dos resíduos na estimativa da variável de resultado. O PROCESS também pode gerar erros padrão usando estimadores de matriz de covariância consistentes com heterocedasticidade HC0, HC1, HC2, HC3 e HC4. Um desses métodos consistentes com heterocedasticidade é solicitado definindo o argumento na opção hc para um número de 0 a 4 (por exemplo, para o estimador HC3, especifique `hc = 3`). Qualquer computação que use o erro padrão de um coeficiente de regressão empregará automaticamente o estimador HC quando esta opção for solicitada, incluindo o teste de Sobel, intervalos de confiança de Monte Carlo para efeitos indiretos, o método Johnson-Neyman, testes de efeitos condicionais em análise de moderação e o teste de significância de $Rˆ2$ para modelos de `Y`, bem como para testes de interações com base na diferença em $Rˆ2$ quando a interação é incluída versus excluída do modelo.

**jn**: Realiza análise de Johnson-Neyman para regiões de significância (0 = não, 1 = sim).

**effsize**: Calcula tamanhos de efeito (parcialmente padronizados e efeitos indiretos completamente padronizados; 0 = não, 1 = sim).

**stand**: Gera coeficientes padronizados do modelo e efeitos diretos, indiretos e totais padronizados (0 = não, 1 = sim). Coeficientes padronizados não disponíveis para modelos com moderadores.

**xmtest**: testa a interação entre X e o mediador (0 = não, 1 = sim).

**normal**: realiza o teste de Sobel (0 = não, 1 = sim).

-   **mdichok**\
    (Opcional) Permite mediação com (Y) dicotômica.

-   **contrast**\
    Especifica contrastes para comparar efeitos.

**modelbt**: Gera intervalos de confiança com bootstrap para coeficientes de regressão não padronizados em cada equação de regressão que define o modelo (0 = não, 1 = sim). Esses intervalos de confiança bootstrap estarão sob as colunas “BootLLCI” e “BootULCI”. A média e o desvio padrão das estimativas bootstrap são exibidos sob as colunas intituladas “Boot-Mean” e “BootSE”. Os coeficientes de regressão originais são encontrados sob a coluna rotulada “Coeﬀ”. Como o número padrão de amostras de bootstrap para os modelos 1, 2 e 3 é zero, a opção `modelbt` não terá efeito para esses modelos, a menos que o número de amostras de bootstrap seja explicitamente declarado usando a opção `boot`.

**matrices**: Exibe a representação matricial do modelo (0 = não, 1 = sim).

-   **covmy**\
    Lógico; especifica inclusão de covariáveis em modelos de mediadores ou da variável dependente.

-   **covcoeff**\
    Lógico; exibe matriz de covariância dos coeficientes.

**boot**: Número de amostras para bootstrap (padrão: 5000).

**mc**: Especifica o número de amostras para o cálculo de intervalos de confiança via Monte Carlo em modelos de mediação simples ou paralela (Modelos 4 e 5). Por exemplo, `mc=5000` solicita 5.000 amostras. Se o valor definido for menor que 1.000, serão usadas 5.000 amostras por padrão. O argumento `mc` tem precedência sobre `boot` (caso sejam utilizados simultaneamente), porém é **ignorada** em modelos de mediação serial ou que envolvam moderação, situações em que os intervalos de confiança são gerados por **bootstrap**.
-   **intprobe**\
    Nível de alfa para avaliação de interações (padrão = 0.10).

**plot**: Lógico; produz uma tabela de dados para visualizar uma interação (0 = não, 1 = sim).

**total**: Lógico; inclui efeitos totais na saída nos modelos de mediação sem efeitos moderadores(0 = não, 1 = sim). Para modelos personalizados, o efeito total não será produzido para nenhum modelo de mediação que fixe qualquer caminho entre `X` e `Y`, entre `X` e um mediador, ou entre um mediador e `Y` para zero. O efeito total também não será fornecido se algumas das covariáveis listadas em `cov = ` forem excluídas dos modelos de `Y` ou de um dos mediadores em `m = `.

**save**: Lógico (0, 1 ou 2); `save = 0` não salva os resultados; `save = 1` produzirá um banco de dados contendo todas as estimativas bootstrap dos coeficientes de regressão que definem o modelo; `save = 2` irá gerar uma matriz contendo as estatísticas da saída do PROCESS para o modelo estimado. Todas as opções exigem o envio de informações do PROCESS para um objeto R usando o operador `<-` ao chamar a função `process()`.

```{r}
#| echo: true
#| eval: false
coef_boot <- process(
  data = data, y = Y, x = X, 
  m = M, model = 4, modelbt = 1, 
  boot = 5000, save = 1
  )
```


**mcx, mcw, mcz**:  Lógico; define X, W ou Z como multicategóricos e especifica o método de codificação;  1 = codificação dummy (dummy coding); 2 = codificação sequencial (sequential coding); 3 = codificação Helmert (Helmert coding); 4 = codificação de efeitos (eﬀect coding)

**moments**: Lógico; configura a forma de explorar a interação em modelos com moderadores quantitativos;   `moments = 0` (padrão): não calcula os efeitos condicionais baseados em desvios-padrão;  `moments = 1`: produz os efeitos condicionais no valor médio do moderador, assim como em um desvio-padrão acima e um abaixo da média. 
**progress**: Lógico; exibe um contador gráfico indicando o progresso em direção à conclusão da amostragem por bootstrap (0 = não, 1 = sim).

-   **exclude**\
    (Opcional) Exclui variáveis específicas do modelo.

-   **bmatrix, wmatrix, zmatrix, wzmatrix, cmatrix**\
    Matrizes personalizadas de modelo.

-   **xcatcode, wcatcode, zcatcode**\
    Codificações personalizadas para variáveis multicategóricas.

-   **wmodval**\
    Especifica valores do moderador (W) para análise de efeitos condicionais.

-   **zmodval**\
    Especifica valores do moderador (Z) para análise de efeitos condicionais.

**center** Lógico (0, 1 ou 2); controla a centralização (em torno da média) das variáveis envolvidas na criação de produtos de moderação antes da estimação do modelo; `center = 0` (padrão): não realiza a centralização das médias; `center = 1`: centraliza todas as variáveis (contínuas ou dicotômicas) usadas na formação de produtos. Os efeitos condicionais apresentados serão calculados com base nas variáveis já centradas em seus valores médios; `center = 2`: centraliza apenas as variáveis contínuas envolvidas em produtos, mantendo variáveis dicotômicas inalteradas.  Variáveis multicategóricas não são centralizadas em nenhuma das opções, pois não há significado em centrá-las. Caso sejam especificados valores de moderadores (por exemplo, `wmodval`) ao mesmo tempo em que se utiliza o mean-centering, esses valores devem ser informados levando em conta a nova métrica centrada.

**conf**: Nível de confiança para intervalos de confiança gerados com bootstrap: de 50 a 99.9999 (padrão = 95).

**seed**: Um número inteiro para reprodutibilidade no bootstrap.

**decimals**: valor especificando precisão decimal (padrão = 10.4 - quatro casas decimais).

-   **maxboot**\
    Máximo de tentativas para substituir amostras bootstrap inválidas.

-   **modelres**\
    Lógico; exibe correlações residuais entre variáveis consequentes.

**bc**: Lógico; usa intervalos de confiança de bootstrap com correção de viés (0 = não, 1 = sim).

**outscreen**: Lógico; direciona saída para o console (0 = não, 1 = sim).

-   **activate**\
    (Opcional) Ativa o uso de macros no software.

**describe**: Lógico; exibe estatísticas descritivas das variáveis do modelo (0 = não, 1 = sim).

-   **listmiss**\
    (Opcional) Lista casos com dados ausentes.

-   **linsum**\
    (Opcional) Exibe somatórios lineares.

-   **xmint**\
    (Opcional) Controla a interação de (X) com variáveis específicas.

-   **xrefval**\
    Especifica valores de referência para a variável (X).

-   **coval**\
    Especifica valores específicos de covariáveis para análise.

-   **cdeval**\
    Especifica valores para efeitos diretos condicionais.

## Instruções gerais

PROCESS para R somente aceita dados em formato numérico. Assim, por exemplo, se uma variável chamada `sex` for codificada como "M" e "F" nos dados, esses códigos alfabéticos devem ser convertidos para o formato numérico (por exemplo, 0 e 1) antes de seu uso na função.

```{r}
dados <- tribble(
  ~sex, ~X, ~M, ~Y,
  "M", 5, 3, 2,
  "F", 1, 4, 3,
  "F", 2, 5, 1,
  "M", 5, 3, 5,
  "F", 1, 4, 1
) |> 
  mutate(
    sex = as_factor(sex)
  )
```

```{r}
#| echo: true
dados

dados <- dados |> 
  mutate(
    sex_process = case_when(sex == "M" ~ 0, 
                            .default = 1),
    .after = sex
  )

dados
```

PROCESS não aceitará variáveis que são designadas como fatores. A designação de fator deve ser removida de uma variável antes que ela possa ser usada.

```{r}
dados <- dados |> 
  select(!sex) |> 
  rename(sex = sex_process) |> 
  mutate(
    sex = as_factor(sex)
  )
```

```{r}
#| echo: true
dados

dados <- dados |> 
  mutate(
    sex = as.double(sex)
  )

dados
```

Dados ausentes devem ser representados no banco de dados como `NA`.

```{r}
dados <- tribble(
  ~sex, ~X, ~M, ~Y,
  "M", 5, 3, 2,
  "999", 1, 4, 3,
  "F", 2, 5, 999,
  "M", 5, 3, 5,
  "F", 1, 999, 1
)
```

```{r}
#| echo: true
dados

dados <- dados |> 
 mutate(
   across(everything(),
          \(x) case_when(x == 999 ~ NA, .default = x)),
   sex = case_when(sex == "M" ~ 0, sex == "F" ~ 1,
                   .default = NA)
 )

dados
```

PROCESS para R requer que nomes de variáveis sejam colocados entre aspas duplas (por exemplo, y = "hello").

Quando mais de uma variável é listada como mediadora ou covariável, os nomes das variáveis devem ser separados por uma vírgula e colocados na função `c()`, como em `m = c("med1", "med2", "med3")` e `cov = c("cov1", "cov2")`.

A opção `plot` no PROCESS para R produz uma tabela de dados para visualizar uma interação, mas não escreve nenhum código R para produzir o gráfico, nem o PROCESS produzirá um gráfico na janela R. Salve a tabela num objeto usando a função `tribble()` e utilize ggplot2 para gerar o gráfico.

```{r}
#| echo: true
#| eval: false
Focal predictor: X (X)
      Moderator: W (W)

Data for visualizing the conditional effect of the focal predictor:
                   X                    W                    Y
                 2.286	              0.000	               3.471
                 3.000	              0.000	               4.471
                 3.703	              0.000	               5.456
                 2.286	              1.000	               2.000
                 3.000	              1.000	               3.500
                 3.703	              1.000	               5.000
```

```{r}
#| echo: true
library(tidyverse)

dados <- tribble(
  ~X,     ~W,     ~Y,
  2.286,  0.000,  3.471,
  3.000,  0.000,  4.471,
  3.703,  0.000,  5.456,
  2.286,  1.000,  2.000,
  3.000,  1.000,  3.500,
  3.703,  1.000,  5.000
)

dados
```

```{r}
#| echo: true
dados |> 
  ggplot(
    aes(x = X, y = Y, 
        color = as_factor(W))
  ) +
  geom_point() +
  geom_smooth(
    method = "lm", se = F
  )
```

O gerador de números aleatórios padrão em R é diferente do gerador de números aleatórios padrão em SPSS e SAS. Assim, os intervalos de confiança bootstrap gerados pelo R serão diferentes daqueles produzidos por SPSS e SAS, mesmo quando a mesma semente for usada ao estimar o mesmo modelo usando os mesmos dados.
