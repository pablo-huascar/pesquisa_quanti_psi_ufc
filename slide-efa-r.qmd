---
title: "Análise Fatorial Exploratória"
subtitle: "Aplicação no R"
format: 
  revealjs:
      logo: img/brasao1_horizontal_cor_300dpi.png
      theme: simple
      css: logo.css
      scrollable: true
progress: true
slide-number: true
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
source("./_common.R")
```

```{r}
#| label: setup
library(tidyverse)
library(janitor)
library(scales)
library(careless)
library(gt)
library(EGAnet)
library(lavaan)
library(MVN)
library(psych)
```

```{r}
cb_racismo_moderno <- read_csv("data/code_book_escala_racismo_moderno.csv")
df <- read_csv("data/dados_racismo_moderno.csv")
```

## Escala de Racismo Moderno



## Escala de Racismo Moderno {.smaller}

```{r}
cb_racismo_moderno |> 
  gt() |> 
  tab_options(
    table.width = pct(100),
    table.font.size = "26px"
  ) |> 
  cols_align(
    columns = Variáveis,
    align = "center" 
  ) |> 
  opt_stylize(
    style = 1, color = "gray"
  ) |> 
  tab_style(
    style = cell_text(align = "center"),
    locations = cells_column_labels(columns = c(Variáveis, Itens, Fator))
    ) |> 
  tab_options(
    table.font.size = "18px"
  )
```

## Obtenção dos dados

Utilize o código abaixo para baixar o banco de dados e salvá-lo no objeto `df`

```{r}
#| echo: true
#| eval: false
df <- read_csv("https://raw.githubusercontent.com/pablo-huascar/pesquisa_quanti_psi_ufc/refs/heads/main/data/dados_racismo_moderno.csv")
```

## Uma olhada nos dados {.smaller}

```{r}
#| tbl-cap: Uma amostra aleatória de dez casos do banco de dados 
#| tbl-cap-location: bottom
set.seed(123)
df |> 
  slice_sample(n = 10) |> 
  gt() |> 
  cols_align(
    align = "center"  
  ) |> 
  tab_options(
    table.width = pct(100),
    table.font.size = "18px"
  ) |> 
  opt_stylize(
    style = 1, color = "gray"
  )
```

## Participantes

```{r}
#| label: descritivos
descritivos <- df |> 
  select(sexo, cor_raca, estado_civil) |> 
  pivot_longer(cols = everything()) |> 
  count(name, value) |> 
  mutate(
    prop = n/sum(n) |> round(1), 
    prop = percent_format(big.mark = ".", decimal.mark = ",")(prop),
    .by = name
  ) |> 
  arrange(factor(name, levels = c("sexo", "estado_civil", "cor_raca")), n)

feminino_prop <- descritivos$prop[descritivos$value == "Feminino"]
pardo_prop <- descritivos$prop[descritivos$value == "Parda"]
idade_range <- range(df$idade)
idade_media <- mean(df$idade) |> round(2) |> format(decimal.mark = ",")
idade_dp <- sd(df$idade) |> round(2) |> format(decimal.mark = ",")
estado_civil_prop <- descritivos$prop[descritivos$value == "Solteiro(a)"]
renda_media <- mean(df$renda_per_capta, na.rm = T) |> round(2) |> 
  format(decimal.mark = ",")
renda_dp <- sd(df$renda_per_capta, na.rm = T) |> round(2) |> 
  format(decimal.mark = ",")
```

Participaram do estudo `r nrow(df)` estudantes universitários. A maior parte era do sexo feminino (`r feminino_prop`) e se declarou como pardo (`r pardo_prop`). A idade variou entre `r idade_range[1]` e `r idade_range[2]` anos (M = `r idade_media`, DP = `r idade_dp`). Em relação ao estado civil, `r estado_civil_prop` afirmaram ser solteiros. A renda familiar per capita média foi de `r renda_media` (DP = `r renda_dp`)

## Pacotes

Carregue os pacotes abaixo:

```{r}
#| echo: true
#| eval: false
library(tidyverse)
library(careless)
library(MVN)
library(EGAnet)
library(psych)
library(lavaan)
```

# Inspeção de dados (Data screening) 

## Manipulação dos dados

```{r}
#| echo: true
escala_de_racismo <- df |>
  select(r1:r14)  # <1>
 
```

1.  Selecionar as variáveis da escala

## Escala de resposta e valores ausentes
::: panel-tabset
### Código

```{r}
#| echo: true
resposta_e_ausentes <- escala_de_racismo |> 
  summarise(
    n = n(),
    across(starts_with("r"), list(
      Minimo = min,
      Máximo = max,
      Ausentes = \(x) sum(is.na(x))
    )), 
  ) |> 
  pivot_longer(
    cols = starts_with("r"),
    names_to = c("Variável", ".value"),
    names_sep = "_"
  ) |> 
  relocate(n, .after = Ausentes) 


```

### Resultado

```{r}
resposta_e_ausentes |> 
  print(n = Inf)
```
:::

## Escala de resposta e valores ausentes (`describe()`) 

```{r}
escala_de_racismo |> 
  describe()
```


## Respostas descuidadas {.smaller}

::: panel-tabset
### `longstring()`

```{r}
#| echo: true
respostas_descuidadas <- longstring(escala_de_racismo, avg = T) |> 
  as_tibble() |> 
  mutate(
    id = 1:n(), .before = 1
  ) |> 
  arrange(desc(longstr)) 

respostas_descuidadas
```

### Filtragem dos casos

```{r}
#| echo: true
ids <- respostas_descuidadas |> 
  filter(longstr == 14) |> 
  select(id) |> 
  pull()


casos <- escala_de_racismo |>
  mutate(
    id = 1:n(), .before = 1
  ) |> 
  filter(id %in% ids) 
```

### Avaliação dos casos 

```{r}
#| echo: true
casos |> 
  print(n = Inf)
```
:::


## Avaliação da normalidade dos dados {.smaller}

::: panel-tabset
### Teste

```{r}
#| echo: true
resultado_normalidade <- mvn(
  escala_de_racismo, 
  mvnTest = "mardia",
  univariateTest = "SW"
)
```

### Descritivos

```{r}
#| echo: true
resultado_normalidade$Descriptives |> 
  as_tibble() |> 
  print(n = Inf)
```

### Normalidade univariada

```{r}
#| echo: true
resultado_normalidade$univariateNormality
```

### Normalidade multivariada

```{r}
#| echo: true
resultado_normalidade$multivariateNormality
```
:::

## Fatorabilidade da Matriz de Dados

::: panel-tabset
### KMO

```{r}
#| echo: true
escala_de_racismo |> 
  polychoric.matrix() |> 
  KMO()
```

### Teste de esfericidade de Bartlett

```{r}
#| echo: true
escala_de_racismo |> 
  polychoric.matrix() |> 
  cortest.bartlett(n = 322)
```
:::


## teste

-   `ordered = T` implica em "WLSMV":

    -   `estimator = "DWLS"`
    -   `se = "robust.sem"`
    -   `test = "scaled.shifted"`

```{r}
#| echo: true
resultado_afe <- efa(
  data = escala_de_racismo,
  ordered = T,
  nfactors = 2,
  rotation = "oblimin",
)
```

## Resultados

```{r}
summary(resultado_afe)
```


```{r}
modelo_escala_de_racismo <- '
f1 =~ r1 + r2 + r3 + r4 + r5 + r6 + r7 + r11 + r12
f2 =~ r8 + r9 + r10 + r13 + r14
'
cfa(model = cfa_escala_de_racismo, data = escala_de_racismo, ordered = T) |> 
  summary(standardized = T, fit.measures = T,
  rsquare= T)
  
```



